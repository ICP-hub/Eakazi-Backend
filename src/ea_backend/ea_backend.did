type Profile = record {
  id : text;
  principal_id : principal;
  occupation : text;
  resume : vec nat8;
  role : Roles;
  description : text;
  email : text;
  fullname : text;
  keywords : vec text;
  organization : text;
  skills : vec text;
  location : text;
  token_ids : vec record {nat; text};
};

type Course = record {
  id : text;
  title : text;
  creator : principal;
  creator_fullname : text;
  applicants : vec principal;
};

type Jobs = record {
  id : text;
  title : text;
  creator : principal;
  creator_fullname : text;
  applicants : vec principal;
};

type CheckUser = record {
  user : principal;
};

type Roles = variant { TRAINEE; TRAINER; ADMIN; EMPLOYER };

// ======================
// NFT
// ======================

type GenericValue = variant {
  Nat64Content : nat64;
  Nat32Content : nat32;
  BoolContent : bool;
  Nat8Content : nat8;
  Int64Content : int64;
  IntContent : int;
  NatContent : nat;
  Nat16Content : nat16;
  Int32Content : int32;
  Int8Content : int8;
  FloatContent : float64;
  Int16Content : int16;
  BlobContent : vec nat8;
  NestedContent : Vec;
  Principal : principal;
  TextContent : text;
};

type TokenMetadata = record {
  transferred_at : opt nat64;
  transferred_by : opt principal;
  owner : opt principal;
  operator : opt principal;
  approved_at : opt nat64;
  approved_by : opt principal;
  properties : vec record { text; GenericValue };
  is_burned : bool;
  token_identifier : nat;
  burned_at : opt nat64;
  burned_by : opt principal;
  minted_at : nat64;
  minted_by : principal;
};

type Vec = vec record {
  text;
  variant {
    Nat64Content : nat64;
    Nat32Content : nat32;
    BoolContent : bool;
    Nat8Content : nat8;
    Int64Content : int64;
    IntContent : int;
    NatContent : nat;
    Nat16Content : nat16;
    Int32Content : int32;
    Int8Content : int8;
    FloatContent : float64;
    Int16Content : int16;
    BlobContent : vec nat8;
    NestedContent : Vec;
    Principal : principal;
    TextContent : text;
  };
};

type InitArgs = record {
  cap : opt principal;
  logo : opt text;
  name : opt text;
  custodians : opt vec principal;
  symbol : opt text;
};

type NftError = variant {
  UnauthorizedOperator;
  SelfTransfer;
  TokenNotFound;
  UnauthorizedOwner;
  SelfApprove;
  OperatorNotFound;
  ExistedNFT;
  OwnerNotFound;
};

type ManualReply_3 = variant { Ok : TokenMetadata; Err : NftError };

type Result = variant { Ok : nat; Err : NftError };

service : (opt InitArgs) -> {
  // User functions
  check_user : () -> (bool);
  create_user : (text, text, text) -> (Profile);
  get : (text) -> (Profile) query;
  get_self : () -> (Profile) query;
  search : (text) -> (opt Profile) query;
  update : (Profile) -> ();
  get_full_name : () -> (text) query;
  get_role : () -> (text) query;
  get_all_freelancers : () -> (vec Profile) query;
  // Job functions
  apply_jobs : (text) -> (opt Jobs);
  create_job : (text) -> (Jobs);
  get_all_jobs : () -> (vec Jobs) query;
  get_jobs_by_creator : () -> (vec Jobs);
  check_applied_job : (text) -> (bool) query;
  get_jobs_applied_count : () -> (nat32) query;
  get_job_applicants : (text) -> (vec Profile) query;
  // Course functions
  get_course : (text) -> (Jobs) query;
  apply_course : (text) -> (opt Course);
  create_course : (text) -> (Course);
  get_all_courses : () -> (vec Course) query;
  get_courses_by_creator : () -> (vec Course);
  check_applied_course : (text) -> (bool) query;
  get_courses_registered_by_user : () -> (vec Course);
  get_course_applicants : (text) -> (vec Profile) query;
  //  NFT functions
  mint_certificate : (text, text, text, text, text) -> (Result);
  // certificate .rs
  dip721_token_metadata : (nat) -> (ManualReply_3) query;
};
